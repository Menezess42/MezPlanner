============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-8.3.2, pluggy-1.5.0
rootdir: /mnt/hdmenezess42/GitProjects/MezPlanner/MezPlanner_v0/tests
plugins: flask-1.3.0
collected 4 items

test_user_routes.py EEEE                                                 [100%]

==================================== ERRORS ====================================
______________________ ERROR at setup of test_create_user ______________________

    @pytest.fixture
    def app():
>       app = create_app()

test_user_routes.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../backend/blueprints/app.py:25: in create_app
    from blueprints.user.routes import user
../backend/blueprints/user/routes.py:2: in <module>
    from blueprints.user.models import User
../backend/blueprints/user/models.py:7: in <module>
    class User(db.Model, UserMixin):
/nix/store/q37iggbq60r0xp3aqin01pyg8bn5cp87-python3.11-flask-sqlalchemy-3.1.1/lib/python3.11/site-packages/flask_sqlalchemy/model.py:92: in __init__
    super().__init__(name, bases, d, **kwargs)
/nix/store/q37iggbq60r0xp3aqin01pyg8bn5cp87-python3.11-flask-sqlalchemy-3.1.1/lib/python3.11/site-packages/flask_sqlalchemy/model.py:144: in __init__
    super().__init__(name, bases, d, **kwargs)
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/orm/decl_api.py:196: in __init__
    _as_declarative(reg, cls, dict_)
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:244: in _as_declarative
    return _MapperConfig.setup_mapping(registry, cls, dict_, None, {})
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:325: in setup_mapping
    return _ClassScanMapperConfig(
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:576: in __init__
    self._setup_table(table)
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:1749: in _setup_table
    table_cls(
/nix/store/q37iggbq60r0xp3aqin01pyg8bn5cp87-python3.11-flask-sqlalchemy-3.1.1/lib/python3.11/site-packages/flask_sqlalchemy/model.py:171: in __table_cls__
    return sa.Table(*args, **kwargs)
<string>:2: in __new__
    ???
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/util/deprecations.py:281: in warned
    return fn(*args, **kwargs)  # type: ignore[no-any-return]
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/sql/schema.py:427: in __new__
    return cls._new(*args, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.sql.schema.Table'>
args = (Column('uid', Integer(), table=None, primary_key=True, nullable=False), Column('username', String(), table=None, null..., nullable=False), Column('birthday', Date(), table=None, nullable=False), Column('createdat', DateTime(), table=None))
kw = {}, name = 'Users', metadata = MetaData(), schema = None
keep_existing = False, extend_existing = False, must_exist = False
key = 'Users'

    @classmethod
    def _new(cls, *args: Any, **kw: Any) -> Any:
        if not args and not kw:
            # python3k pickle seems to call this
            return object.__new__(cls)
    
        try:
            name, metadata, args = args[0], args[1], args[2:]
        except IndexError:
            raise TypeError(
                "Table() takes at least two positional-only "
                "arguments 'name' and 'metadata'"
            )
    
        schema = kw.get("schema", None)
        if schema is None:
            schema = metadata.schema
        elif schema is BLANK_SCHEMA:
            schema = None
        keep_existing = kw.get("keep_existing", False)
        extend_existing = kw.get("extend_existing", False)
    
        if keep_existing and extend_existing:
            msg = "keep_existing and extend_existing are mutually exclusive."
            raise exc.ArgumentError(msg)
    
        must_exist = kw.pop("must_exist", kw.pop("mustexist", False))
        key = _get_table_key(name, schema)
        if key in metadata.tables:
            if not keep_existing and not extend_existing and bool(args):
>               raise exc.InvalidRequestError(
                    f"Table '{key}' is already defined for this MetaData "
                    "instance.  Specify 'extend_existing=True' "
                    "to redefine "
                    "options and columns on an "
                    "existing Table object."
                )
E               sqlalchemy.exc.InvalidRequestError: Table 'Users' is already defined for this MetaData instance.  Specify 'extend_existing=True' to redefine options and columns on an existing Table object.

/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/sql/schema.py:459: InvalidRequestError
_______________________ ERROR at setup of test_get_user ________________________

    @pytest.fixture
    def app():
>       app = create_app()

test_user_routes.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../backend/blueprints/app.py:25: in create_app
    from blueprints.user.routes import user
../backend/blueprints/user/routes.py:2: in <module>
    from blueprints.user.models import User
../backend/blueprints/user/models.py:7: in <module>
    class User(db.Model, UserMixin):
/nix/store/q37iggbq60r0xp3aqin01pyg8bn5cp87-python3.11-flask-sqlalchemy-3.1.1/lib/python3.11/site-packages/flask_sqlalchemy/model.py:92: in __init__
    super().__init__(name, bases, d, **kwargs)
/nix/store/q37iggbq60r0xp3aqin01pyg8bn5cp87-python3.11-flask-sqlalchemy-3.1.1/lib/python3.11/site-packages/flask_sqlalchemy/model.py:144: in __init__
    super().__init__(name, bases, d, **kwargs)
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/orm/decl_api.py:196: in __init__
    _as_declarative(reg, cls, dict_)
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:244: in _as_declarative
    return _MapperConfig.setup_mapping(registry, cls, dict_, None, {})
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:325: in setup_mapping
    return _ClassScanMapperConfig(
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:576: in __init__
    self._setup_table(table)
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:1749: in _setup_table
    table_cls(
/nix/store/q37iggbq60r0xp3aqin01pyg8bn5cp87-python3.11-flask-sqlalchemy-3.1.1/lib/python3.11/site-packages/flask_sqlalchemy/model.py:171: in __table_cls__
    return sa.Table(*args, **kwargs)
<string>:2: in __new__
    ???
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/util/deprecations.py:281: in warned
    return fn(*args, **kwargs)  # type: ignore[no-any-return]
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/sql/schema.py:427: in __new__
    return cls._new(*args, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.sql.schema.Table'>
args = (Column('uid', Integer(), table=None, primary_key=True, nullable=False), Column('username', String(), table=None, null..., nullable=False), Column('birthday', Date(), table=None, nullable=False), Column('createdat', DateTime(), table=None))
kw = {}, name = 'Users', metadata = MetaData(), schema = None
keep_existing = False, extend_existing = False, must_exist = False
key = 'Users'

    @classmethod
    def _new(cls, *args: Any, **kw: Any) -> Any:
        if not args and not kw:
            # python3k pickle seems to call this
            return object.__new__(cls)
    
        try:
            name, metadata, args = args[0], args[1], args[2:]
        except IndexError:
            raise TypeError(
                "Table() takes at least two positional-only "
                "arguments 'name' and 'metadata'"
            )
    
        schema = kw.get("schema", None)
        if schema is None:
            schema = metadata.schema
        elif schema is BLANK_SCHEMA:
            schema = None
        keep_existing = kw.get("keep_existing", False)
        extend_existing = kw.get("extend_existing", False)
    
        if keep_existing and extend_existing:
            msg = "keep_existing and extend_existing are mutually exclusive."
            raise exc.ArgumentError(msg)
    
        must_exist = kw.pop("must_exist", kw.pop("mustexist", False))
        key = _get_table_key(name, schema)
        if key in metadata.tables:
            if not keep_existing and not extend_existing and bool(args):
>               raise exc.InvalidRequestError(
                    f"Table '{key}' is already defined for this MetaData "
                    "instance.  Specify 'extend_existing=True' "
                    "to redefine "
                    "options and columns on an "
                    "existing Table object."
                )
E               sqlalchemy.exc.InvalidRequestError: Table 'Users' is already defined for this MetaData instance.  Specify 'extend_existing=True' to redefine options and columns on an existing Table object.

/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/sql/schema.py:459: InvalidRequestError
______________________ ERROR at setup of test_update_user ______________________

    @pytest.fixture
    def app():
>       app = create_app()

test_user_routes.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../backend/blueprints/app.py:25: in create_app
    from blueprints.user.routes import user
../backend/blueprints/user/routes.py:2: in <module>
    from blueprints.user.models import User
../backend/blueprints/user/models.py:7: in <module>
    class User(db.Model, UserMixin):
/nix/store/q37iggbq60r0xp3aqin01pyg8bn5cp87-python3.11-flask-sqlalchemy-3.1.1/lib/python3.11/site-packages/flask_sqlalchemy/model.py:92: in __init__
    super().__init__(name, bases, d, **kwargs)
/nix/store/q37iggbq60r0xp3aqin01pyg8bn5cp87-python3.11-flask-sqlalchemy-3.1.1/lib/python3.11/site-packages/flask_sqlalchemy/model.py:144: in __init__
    super().__init__(name, bases, d, **kwargs)
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/orm/decl_api.py:196: in __init__
    _as_declarative(reg, cls, dict_)
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:244: in _as_declarative
    return _MapperConfig.setup_mapping(registry, cls, dict_, None, {})
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:325: in setup_mapping
    return _ClassScanMapperConfig(
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:576: in __init__
    self._setup_table(table)
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:1749: in _setup_table
    table_cls(
/nix/store/q37iggbq60r0xp3aqin01pyg8bn5cp87-python3.11-flask-sqlalchemy-3.1.1/lib/python3.11/site-packages/flask_sqlalchemy/model.py:171: in __table_cls__
    return sa.Table(*args, **kwargs)
<string>:2: in __new__
    ???
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/util/deprecations.py:281: in warned
    return fn(*args, **kwargs)  # type: ignore[no-any-return]
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/sql/schema.py:427: in __new__
    return cls._new(*args, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.sql.schema.Table'>
args = (Column('uid', Integer(), table=None, primary_key=True, nullable=False), Column('username', String(), table=None, null..., nullable=False), Column('birthday', Date(), table=None, nullable=False), Column('createdat', DateTime(), table=None))
kw = {}, name = 'Users', metadata = MetaData(), schema = None
keep_existing = False, extend_existing = False, must_exist = False
key = 'Users'

    @classmethod
    def _new(cls, *args: Any, **kw: Any) -> Any:
        if not args and not kw:
            # python3k pickle seems to call this
            return object.__new__(cls)
    
        try:
            name, metadata, args = args[0], args[1], args[2:]
        except IndexError:
            raise TypeError(
                "Table() takes at least two positional-only "
                "arguments 'name' and 'metadata'"
            )
    
        schema = kw.get("schema", None)
        if schema is None:
            schema = metadata.schema
        elif schema is BLANK_SCHEMA:
            schema = None
        keep_existing = kw.get("keep_existing", False)
        extend_existing = kw.get("extend_existing", False)
    
        if keep_existing and extend_existing:
            msg = "keep_existing and extend_existing are mutually exclusive."
            raise exc.ArgumentError(msg)
    
        must_exist = kw.pop("must_exist", kw.pop("mustexist", False))
        key = _get_table_key(name, schema)
        if key in metadata.tables:
            if not keep_existing and not extend_existing and bool(args):
>               raise exc.InvalidRequestError(
                    f"Table '{key}' is already defined for this MetaData "
                    "instance.  Specify 'extend_existing=True' "
                    "to redefine "
                    "options and columns on an "
                    "existing Table object."
                )
E               sqlalchemy.exc.InvalidRequestError: Table 'Users' is already defined for this MetaData instance.  Specify 'extend_existing=True' to redefine options and columns on an existing Table object.

/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/sql/schema.py:459: InvalidRequestError
______________________ ERROR at setup of test_delete_user ______________________

    @pytest.fixture
    def app():
>       app = create_app()

test_user_routes.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../backend/blueprints/app.py:25: in create_app
    from blueprints.user.routes import user
../backend/blueprints/user/routes.py:2: in <module>
    from blueprints.user.models import User
../backend/blueprints/user/models.py:7: in <module>
    class User(db.Model, UserMixin):
/nix/store/q37iggbq60r0xp3aqin01pyg8bn5cp87-python3.11-flask-sqlalchemy-3.1.1/lib/python3.11/site-packages/flask_sqlalchemy/model.py:92: in __init__
    super().__init__(name, bases, d, **kwargs)
/nix/store/q37iggbq60r0xp3aqin01pyg8bn5cp87-python3.11-flask-sqlalchemy-3.1.1/lib/python3.11/site-packages/flask_sqlalchemy/model.py:144: in __init__
    super().__init__(name, bases, d, **kwargs)
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/orm/decl_api.py:196: in __init__
    _as_declarative(reg, cls, dict_)
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:244: in _as_declarative
    return _MapperConfig.setup_mapping(registry, cls, dict_, None, {})
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:325: in setup_mapping
    return _ClassScanMapperConfig(
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:576: in __init__
    self._setup_table(table)
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:1749: in _setup_table
    table_cls(
/nix/store/q37iggbq60r0xp3aqin01pyg8bn5cp87-python3.11-flask-sqlalchemy-3.1.1/lib/python3.11/site-packages/flask_sqlalchemy/model.py:171: in __table_cls__
    return sa.Table(*args, **kwargs)
<string>:2: in __new__
    ???
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/util/deprecations.py:281: in warned
    return fn(*args, **kwargs)  # type: ignore[no-any-return]
/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/sql/schema.py:427: in __new__
    return cls._new(*args, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.sql.schema.Table'>
args = (Column('uid', Integer(), table=None, primary_key=True, nullable=False), Column('username', String(), table=None, null..., nullable=False), Column('birthday', Date(), table=None, nullable=False), Column('createdat', DateTime(), table=None))
kw = {}, name = 'Users', metadata = MetaData(), schema = None
keep_existing = False, extend_existing = False, must_exist = False
key = 'Users'

    @classmethod
    def _new(cls, *args: Any, **kw: Any) -> Any:
        if not args and not kw:
            # python3k pickle seems to call this
            return object.__new__(cls)
    
        try:
            name, metadata, args = args[0], args[1], args[2:]
        except IndexError:
            raise TypeError(
                "Table() takes at least two positional-only "
                "arguments 'name' and 'metadata'"
            )
    
        schema = kw.get("schema", None)
        if schema is None:
            schema = metadata.schema
        elif schema is BLANK_SCHEMA:
            schema = None
        keep_existing = kw.get("keep_existing", False)
        extend_existing = kw.get("extend_existing", False)
    
        if keep_existing and extend_existing:
            msg = "keep_existing and extend_existing are mutually exclusive."
            raise exc.ArgumentError(msg)
    
        must_exist = kw.pop("must_exist", kw.pop("mustexist", False))
        key = _get_table_key(name, schema)
        if key in metadata.tables:
            if not keep_existing and not extend_existing and bool(args):
>               raise exc.InvalidRequestError(
                    f"Table '{key}' is already defined for this MetaData "
                    "instance.  Specify 'extend_existing=True' "
                    "to redefine "
                    "options and columns on an "
                    "existing Table object."
                )
E               sqlalchemy.exc.InvalidRequestError: Table 'Users' is already defined for this MetaData instance.  Specify 'extend_existing=True' to redefine options and columns on an existing Table object.

/nix/store/rlf51b1kkb3gx4a69v61s9v7zmk6a0fd-python3.11-sqlalchemy-2.0.32/lib/python3.11/site-packages/sqlalchemy/sql/schema.py:459: InvalidRequestError
=============================== warnings summary ===============================
test_user_routes.py::test_get_user
test_user_routes.py::test_update_user
test_user_routes.py::test_delete_user
  /nix/store/q37iggbq60r0xp3aqin01pyg8bn5cp87-python3.11-flask-sqlalchemy-3.1.1/lib/python3.11/site-packages/flask_sqlalchemy/model.py:144: SAWarning: This declarative base already contains a class with the same class name and module name as blueprints.user.models.User, and will be replaced in the string-lookup table.
    super().__init__(name, bases, d, **kwargs)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
ERROR test_user_routes.py::test_create_user - sqlalchemy.exc.InvalidRequestEr...
ERROR test_user_routes.py::test_get_user - sqlalchemy.exc.InvalidRequestError...
ERROR test_user_routes.py::test_update_user - sqlalchemy.exc.InvalidRequestEr...
ERROR test_user_routes.py::test_delete_user - sqlalchemy.exc.InvalidRequestEr...
======================== 3 warnings, 4 errors in 1.27s =========================
